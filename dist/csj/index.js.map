{"version":3,"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","_assertThisInitialized","ReferenceError","Boolean","valueOf","_get","get","bind","_superPropBase","getOwnPropertyDescriptor","_inherits","_setPrototypeOf","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","kContextIdFunctionPrefix","kContextIdRegex","RegExp","concat","randomUUID","replace","Math","random","toString","runCallback","callback","data","err","console","error","cloneValue","obj","Date","getTime","Array","copy","len","attr","SimpleEventEmitter","subscriptions","oneTimeEvents","Map","on","event","has","once","self","off","filter","_this","ourCallback","emit","splice","emitOnce","set","ContextValue","_value","_cache","id","undefined","delete","_delete","clear","_SimpleEventEmitter2","_defaultValue","_this2","getContextId","evn","contexts","isArray","events","reject","provider","target","defaultValue","_callee","_self$processLength$g","_self$processLength$g2","contextId","proxy","fnName","result","_len","args","_key","_self$events$contextI","_args","_callee$","_context","processLength","now","eval","t0","_ref2","context","cache","_Error$stack","stack","split","_iterator","_createForOfIteratorHelper","_step","frame","match","trim","_this$contexts$get$va","_this$contexts$get","_this$contexts$get$va2","_this$contexts$get2","assignValue","a_is_obj","includes","b_is_obj","assign","proxyValue","_this$get","Proxy","prop","deleteProperty","createContext","_default","exports","default"],"sources":["unknown"],"sourcesContent":["const kContextIdFunctionPrefix = \"_context_id_\";\nconst kContextIdRegex = new RegExp(`_${kContextIdFunctionPrefix}_([0-9a-zA-Z]{32})_([0-9a-zA-Z]{32})_(\\\\d+)__`);\nconst randomUUID = () => {\n    return \"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n        const r = (Math.random() * 16) | 0;\n        const v = c == \"x\" ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n};\nconst runCallback = (callback, data) => {\n    try {\n        callback(data);\n    }\n    catch (err) {\n        console.error(\"Error in subscription callback\", err);\n    }\n};\nconst cloneValue = (obj) => {\n    // Handle the 3 simple types, and null or undefined\n    if (null == obj || \"object\" != typeof obj)\n        return obj;\n    // Handle Date\n    if (obj instanceof Date) {\n        return new Date(obj.getTime());\n    }\n    // Handle Array\n    if (obj instanceof Array) {\n        const copy = [];\n        for (let i = 0, len = obj.length; i < len; i++) {\n            copy[i] = cloneValue(obj[i]);\n        }\n        return copy;\n    }\n    // Handle Object\n    if (obj instanceof Object) {\n        const copy = {};\n        for (let attr in obj) {\n            if (obj.hasOwnProperty(attr))\n                copy[attr] = cloneValue(obj[attr]);\n        }\n        return copy;\n    }\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n};\nclass SimpleEventEmitter {\n    subscriptions;\n    oneTimeEvents;\n    constructor() {\n        this.subscriptions = [];\n        this.oneTimeEvents = new Map();\n    }\n    on(event, callback) {\n        if (this.oneTimeEvents.has(event)) {\n            runCallback(callback, this.oneTimeEvents.get(event));\n        }\n        else {\n            this.subscriptions.push({ event, callback, once: false });\n        }\n        const self = this;\n        return {\n            stop() {\n                self.off(event, callback);\n            },\n        };\n    }\n    off(event, callback) {\n        this.subscriptions = this.subscriptions.filter((s) => s.event !== event || (callback && s.callback !== callback));\n        return this;\n    }\n    once(event, callback) {\n        return new Promise((resolve) => {\n            const ourCallback = (data) => {\n                resolve(data);\n                callback?.(data);\n            };\n            if (this.oneTimeEvents.has(event)) {\n                runCallback(ourCallback, this.oneTimeEvents.get(event));\n            }\n            else {\n                this.subscriptions.push({\n                    event,\n                    callback: ourCallback,\n                    once: true,\n                });\n            }\n        });\n    }\n    emit(event, data) {\n        if (this.oneTimeEvents.has(event)) {\n            throw new Error(`Event \"${event}\" was supposed to be emitted only once`);\n        }\n        for (let i = 0; i < this.subscriptions.length; i++) {\n            const s = this.subscriptions[i];\n            if (s.event !== event) {\n                continue;\n            }\n            runCallback(s.callback, data);\n            if (s.once) {\n                this.subscriptions.splice(i, 1);\n                i--;\n            }\n        }\n        return this;\n    }\n    emitOnce(event, data) {\n        if (this.oneTimeEvents.has(event)) {\n            throw new Error(`Event \"${event}\" was supposed to be emitted only once`);\n        }\n        this.emit(event, data);\n        this.oneTimeEvents.set(event, data); // Mark event as being emitted once for future subscribers\n        this.off(event); // Remove all listeners for this event, they won't fire again\n        return this;\n    }\n}\nclass ContextValue {\n    _value;\n    _cache;\n    constructor(value) {\n        this._value = cloneValue(value);\n        this._cache = {};\n    }\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this._value = value;\n    }\n    get cache() {\n        const self = this;\n        return {\n            get: (id) => (id in self._cache ? self._cache[id] : undefined),\n            set: (id, value) => (self._cache[id] = value),\n            delete: (id) => delete self._cache[id],\n            clear: () => (self._cache = {}),\n            has: (id) => id in self._cache,\n        };\n    }\n}\nclass Context extends SimpleEventEmitter {\n    _defaultValue;\n    id = randomUUID();\n    processLength = new Map();\n    contexts = new Map();\n    events = {};\n    constructor(_defaultValue) {\n        super();\n        this._defaultValue = _defaultValue;\n    }\n    get defaultValue() {\n        return cloneValue(this._defaultValue);\n    }\n    on(event, callback) {\n        const id = this.getContextId();\n        const evn = super.on(event, callback);\n        if (this.contexts.has(id)) {\n            if (!Array.isArray(this.events[id])) {\n                this.events[id] = [];\n            }\n            this.events[id].push({ event, callback });\n            return evn;\n        }\n        else {\n            evn.stop();\n            return evn;\n        }\n    }\n    once(event, callback) {\n        const id = this.getContextId();\n        if (this.contexts.has(id)) {\n            if (!Array.isArray(this.events[id])) {\n                this.events[id] = [];\n            }\n            this.events[id].push({ event, callback });\n            return super.once(event, callback);\n        }\n        else {\n            return Promise.reject();\n        }\n    }\n    off(event, callback) {\n        super.off(event, callback);\n        return this;\n    }\n    emit(event, data) {\n        super.emit(event, data);\n        return this;\n    }\n    emitOnce(event, data) {\n        super.emitOnce(event, data);\n        return this;\n    }\n    provider(target, defaultValue = this.defaultValue) {\n        const self = this;\n        return async function (...args) {\n            const contextId = self.getContextId();\n            if (!self.contexts.has(contextId)) {\n                self.contexts.set(contextId, new ContextValue(defaultValue ?? this._defaultValue));\n            }\n            self.processLength.set(contextId, (self.processLength.get(contextId) ?? 0) + 1);\n            let proxy = () => Promise.resolve();\n            const fnName = `_${kContextIdFunctionPrefix}_${self.id}_${contextId}_${Date.now()}__`;\n            eval(`proxy = async function ${fnName}(target, ...args){\r\n                    return await Promise.race([target.apply(this, args)]);\r\n                }`);\n            let result = undefined, error = undefined;\n            try {\n                result = await proxy.call(this, target, ...args);\n            }\n            catch (e) {\n                error = new Error(e);\n            }\n            const length = self.processLength.get(contextId) ?? 0;\n            if (length <= 1) {\n                self.contexts.delete(contextId);\n                self.processLength.delete(contextId);\n                (self.events[contextId] ?? []).splice(0).forEach(({ event, callback }) => {\n                    self.off(event, callback);\n                });\n            }\n            else {\n                self.processLength.set(contextId, length - 1);\n            }\n            return error instanceof Error ? Promise.reject(error) : result;\n        };\n    }\n    get value() {\n        return this.get();\n    }\n    set value(value) {\n        this.set(value);\n    }\n    get cache() {\n        const id = this.getContextId();\n        const context = this.contexts.get(id);\n        if (!context) {\n            return new ContextValue(this.defaultValue).cache;\n        }\n        return context.cache;\n    }\n    getContextId() {\n        const stack = (new Error().stack ?? \"\").split(\"\\n\");\n        for (const frame of stack) {\n            const match = frame.match(kContextIdRegex);\n            if (!match) {\n                continue;\n            }\n            const contextId = match[1], id = match[2];\n            if (typeof contextId !== \"string\" || contextId.trim() === \"\") {\n                continue;\n            }\n            if (contextId !== this.id) {\n                continue;\n            }\n            if (typeof id !== \"string\" || id.trim() === \"\") {\n                continue;\n            }\n            return id;\n        }\n        return randomUUID();\n    }\n    get() {\n        const id = this.getContextId();\n        return this.contexts.get(id)?.value ?? this.defaultValue;\n    }\n    set(value) {\n        const id = this.getContextId();\n        const context = this.contexts.get(id);\n        if (context) {\n            context.value = value;\n        }\n        this.emit(\"context\", {\n            contextId: id,\n            value: value,\n        });\n        return this.contexts.get(id)?.value ?? value;\n    }\n    assignValue(value) {\n        const context = this.get();\n        if (!context) {\n            return this.set(value);\n        }\n        const a_is_obj = [\"[object Object]\", \"[object Array]\"].includes(Object.prototype.toString.call(context));\n        const b_is_obj = [\"[object Object]\", \"[object Array]\"].includes(Object.prototype.toString.call(value));\n        if ((a_is_obj && !b_is_obj) || (!a_is_obj && !b_is_obj)) {\n            return context;\n        }\n        else if (!a_is_obj && b_is_obj) {\n            return this.set(value);\n        }\n        return this.set(Object.assign(context, value));\n    }\n    proxyValue() {\n        const context = this.get() ?? {};\n        if (!context || typeof context !== \"object\" || context === null) {\n            throw new Error(\"Context is not an object\");\n        }\n        const self = this;\n        return new Proxy(context, {\n            get(target, prop) {\n                return target[prop];\n            },\n            set(target, prop, value) {\n                target[prop] = value;\n                self.set(target);\n                return true;\n            },\n            deleteProperty(target, prop) {\n                delete target[prop];\n                self.set(target);\n                return true;\n            },\n        });\n    }\n}\n/**\n * Cria um novo contexto com um valor padrão.\n *\n * @template T - O tipo do valor padrão do contexto.\n * @template C - O tipo do escopo cache do contexto, que deve ser um objeto. Por padrão, é um objeto genérico com chaves do tipo string e valores de qualquer tipo. Útil apenas em casos específicos onde você deseja armazenar valores em cache no contexto.\n *\n * @param {T} defaultValue - O valor padrão do contexto.\n * @returns {Context<T, C>} Uma nova instância de `Context` com o valor padrão fornecido.\n \n * @example\n * const context = createContext(0);\n *\n * const someFunction = async ()=>{\n *    context.value += 1;\n * };\n *\n * const initialize = context.provider(async function(){\n *     someFunction();\n *     someFunction();\n *     someFunction();\n *     someFunction();\n *     console.log(context.value); // 4\n * });\n *\n * initialize();\n */\nexport function createContext(defaultValue) {\n    return new Context(defaultValue);\n}\nexport default createContext;\n//# sourceMappingURL=index.js.map"],"mappings":"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","ignoreList":[]}